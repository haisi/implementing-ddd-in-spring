<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.3.1</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>li.selman</groupId>
    <artifactId>implementing-ddd</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>implementing-ddd</name>
    <description>implementing-ddd</description>
    <url/>
    <licenses>
        <license/>
    </licenses>
    <developers>
        <developer/>
    </developers>
    <scm>
        <connection/>
        <developerConnection/>
        <tag/>
        <url/>
    </scm>
    <properties>
        <java.version>21</java.version>
        <spring-modulith.version>1.2.1</spring-modulith.version>
        <jmolecules.version>1.9.0</jmolecules.version>
        <jmolecules-integrations.version>0.20.0</jmolecules-integrations.version>
        <bytebuddy.version>1.14.17</bytebuddy.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-hateoas</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.modulith</groupId>
            <artifactId>spring-modulith-starter-core</artifactId>
        </dependency>
        <!-- Added to support transactional event publication inside modulith-->
        <dependency>
            <groupId>org.springframework.modulith</groupId>
            <artifactId>spring-modulith-starter-jpa</artifactId>
        </dependency>

        <!-- Jackson -->
        <!-- support for detecting constructor and factory method ("creator") parameters without having to use @JsonProperty annotation	-->
        <dependency>
            <groupId>com.fasterxml.jackson.module</groupId>
            <artifactId>jackson-module-parameter-names</artifactId>
        </dependency>
        <!-- Java 8 Date/time -->
        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jsr310</artifactId>
        </dependency>
        <!-- support for other new Java 8 datatypes outside of date/time: most notably Optional, OptionalLong, OptionalDouble -->
        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jdk8</artifactId>
        </dependency>

        <!-- DB schema migration -->
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-database-postgresql</artifactId>
        </dependency>

        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>runtime</scope>
        </dependency>

        <dependency>
            <groupId>io.hypersistence</groupId>
            <artifactId>hypersistence-utils-hibernate-63</artifactId>
            <version>3.8.0</version>
        </dependency>

        <!--
        jMolecules: Annotations and interfaces to enrich codebase with tactical DDD and architecture concepts.
        Helps bridge the model-code and architecture-code gap.
        See for more: https://github.com/xmolecules/jmolecules
        -->
        <dependency>
            <groupId>org.jmolecules</groupId>
            <artifactId>jmolecules-ddd</artifactId>
            <version>${jmolecules.version}</version>
        </dependency>
        <dependency>
            <groupId>org.jmolecules</groupId>
            <artifactId>jmolecules-events</artifactId>
            <version>${jmolecules.version}</version>
        </dependency>
        <dependency>
            <groupId>org.jmolecules</groupId>
            <artifactId>jmolecules-onion-architecture</artifactId>
            <version>${jmolecules.version}</version>
        </dependency>

        <!--
        jMolecules Integrations:
        See for more: https://github.com/xmolecules/jmolecules-integrations
        -->
        <dependency>
            <groupId>org.jmolecules.integrations</groupId>
            <artifactId>jmolecules-apt</artifactId>
            <version>${jmolecules-integrations.version}</version>
        </dependency>
        <dependency>
            <groupId>org.jmolecules.integrations</groupId>
            <artifactId>jmolecules-ddd-integration</artifactId>
            <version>${jmolecules-integrations.version}</version>
        </dependency>
        <dependency>
            <groupId>org.jmolecules.integrations</groupId>
            <artifactId>jmolecules-spring</artifactId>
            <version>${jmolecules-integrations.version}</version>
        </dependency>
        <dependency>
            <groupId>org.jmolecules.integrations</groupId>
            <artifactId>jmolecules-jpa</artifactId>
            <version>${jmolecules-integrations.version}</version>
        </dependency>

<!-- =============================================================================================================== -->
<!-- ================================================= Dev Tools  ================================================== -->
<!-- =============================================================================================================== -->
        <dependency>
            <!--
            Refreshes the Spring Context on compilation on running app server.
            Meaning, during development restarting the app is required fewer times.
             -->
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
        <dependency>
            <!--
            Automatically starts up the local docker-compose file.
             -->
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-docker-compose</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>

<!-- =============================================================================================================== -->
<!-- ============================================== Test Dependencies ============================================== -->
<!-- =============================================================================================================== -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-testcontainers</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.restdocs</groupId>
            <artifactId>spring-restdocs-mockmvc</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.modulith</groupId>
            <artifactId>spring-modulith-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jmolecules.integrations</groupId>
            <artifactId>jmolecules-starter-test</artifactId>
            <version>${jmolecules-integrations.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- Test Container -->
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>postgresql</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <!--
            Used in Java unit tests to verify whether the contract for the equals and hashCode methods in a class is met.
            See for more: https://jqno.nl/equalsverifier/manual/
            -->
            <groupId>nl.jqno.equalsverifier</groupId>
            <artifactId>equalsverifier</artifactId>
            <version>3.16.1</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.modulith</groupId>
                <artifactId>spring-modulith-bom</artifactId>
                <version>${spring-modulith.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.13.0</version>
                <configuration>
                    <source>21</source>
                    <target>21</target>
                    <encoding>UTF-8</encoding>
                    <compilerArgs>
                        <arg>-XDcompilePolicy=simple</arg>
                        <arg>-Xplugin:ErrorProne -XepOpt:NullAway:AnnotatedPackages=li.selman.ddd</arg>
                    </compilerArgs>
                    <annotationProcessorPaths>
                        <!--
                        - Analyses AST to spot bugs: https://errorprone.info/bugpatterns
                            - Can be extended with custom or third-party bug patterns: https://error-prone.picnic.tech/
                        - Can automatically patch code not matching a patter
                            - Can be extended with custom or third-part patchers
                        -->
                        <path>
                            <groupId>com.google.errorprone</groupId>
                            <artifactId>error_prone_core</artifactId>
                            <version>2.23.0</version>
                        </path>
                        <!--
                        - Helps eliminate NullPointerExceptions
                        - Requires error prone
                        See for more: https://github.com/uber/NullAway/wiki
                        -->
                        <path>
                            <groupId>com.uber.nullaway</groupId>
                            <artifactId>nullaway</artifactId>
                            <version>0.10.15</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>
            <plugin>
                <!--
                - Code formatter verifying and applying the google-java-format.
                - Runs as part of the verify phase.
                - Apart from fmt:check, the plugin can also auto format the code using 'mvn fmt:format'
                - Install the IntelliJ plugin and configure your IntelliJ JRE Config
                https://github.com/google/google-java-format/blob/master/README.md#intellij-android-studio-and-other-jetbrains-ides

                See for more infos: https://github.com/spotify/fmt-maven-plugin
                -->
                <groupId>com.spotify.fmt</groupId>
                <artifactId>fmt-maven-plugin</artifactId>
                <version>2.23</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <!--
                maven-enforcer-plugin helps keep sanity in your pom.xml
                -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>3.5.0</version>
                <executions>
                    <execution>
                        <id>enforce-versions</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <rules>
                        <banDuplicatePomDependencyVersions/>
                        <banDynamicVersions/>
                        <dependencyConvergence>
                            <excludes>
                                <!-- disabled for jMolecules -->
                                <exclude>org.jmolecules*</exclude>
                            </excludes>
                        </dependencyConvergence>
                        <requireJavaVersion>
                            <version>${java.version}</version>
                        </requireJavaVersion>
                    </rules>
                    <fail>true</fail>
                </configuration>
            </plugin>
            <!--            <plugin>-->
            <!--                <groupId>org.asciidoctor</groupId>-->
            <!--                <artifactId>asciidoctor-maven-plugin</artifactId>-->
            <!--                <version>2.2.1</version>-->
            <!--                <executions>-->
            <!--                    <execution>-->
            <!--                        <id>generate-docs</id>-->
            <!--                        <phase>prepare-package</phase>-->
            <!--                        <goals>-->
            <!--                            <goal>process-asciidoc</goal>-->
            <!--                        </goals>-->
            <!--                        <configuration>-->
            <!--                            <backend>html</backend>-->
            <!--                            <doctype>book</doctype>-->
            <!--                        </configuration>-->
            <!--                    </execution>-->
            <!--                </executions>-->
            <!--                <dependencies>-->
            <!--                    <dependency>-->
            <!--                        <groupId>org.springframework.restdocs</groupId>-->
            <!--                        <artifactId>spring-restdocs-asciidoctor</artifactId>-->
            <!--                    </dependency>-->
            <!--                </dependencies>-->
            <!--            </plugin>-->
        </plugins>
    </build>

    <profiles>
        <profile>
            <!--
            Does not play well with ArchUnit
            See: https://github.com/xmolecules/jmolecules-integrations/issues/245
            -->
            <id>jmolecules-bytebuddy</id>
            <dependencies>
                <dependency>
                    <groupId>org.jmolecules.integrations</groupId>
                    <artifactId>jmolecules-bytebuddy</artifactId>
                    <version>${jmolecules-integrations.version}</version>
                </dependency>
            </dependencies>
            <build>
                <plugins>
                    <plugin>
                        <groupId>net.bytebuddy</groupId>
                        <artifactId>byte-buddy-maven-plugin</artifactId>
                        <version>${bytebuddy.version}</version>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>transform</goal> <!-- Enable the source code transformation -->
                                </goals>
                            </execution>
                        </executions>
                        <dependencies>
                            <dependency> <!-- Apply jMolecules transformations -->
                                <groupId>org.jmolecules.integrations</groupId>
                                <artifactId>jmolecules-bytebuddy</artifactId>
                                <version>${jmolecules-integrations.version}</version>
                            </dependency>
                        </dependencies>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
