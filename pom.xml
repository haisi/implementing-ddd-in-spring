<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.4.1</version>
        <!-- lookup parent from repository -->
        <relativePath/>
    </parent>
    <groupId>li.selman</groupId>
    <artifactId>implementing-ddd</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>implementing-ddd</name>
    <description>implementing-ddd</description>
    <url/>
    <licenses>
        <license/>
    </licenses>
    <developers>
        <developer/>
    </developers>
    <scm>
        <connection/>
        <developerConnection/>
        <tag/>
        <url/>
    </scm>
    <properties>
        <aws.java.sdk.version>2.30.10</aws.java.sdk.version>
        <bytebuddy.version>1.14.17</bytebuddy.version>
        <error-prone-core.version>2.36.0</error-prone-core.version>
        <!-- Properties using which additional Error Prone flags can be
        specified. Used by the `patch` and `self-check` profiles. -->
        <error-prone.patch-args/>
        <hypersistence-utils-hibernate-63.version>3.9.0</hypersistence-utils-hibernate-63.version>

        <java.version>21</java.version>
        <jmolecules-integrations.version>0.24.1</jmolecules-integrations.version>
        <jmolecules.version>1.10.0</jmolecules.version>
        <loki-logback-appender.version>1.6.0</loki-logback-appender.version>
        <nullaway.version>0.12.2</nullaway.version>
        <!-- https://spring.io/projects/spring-cloud -->
        <spring-cloud.version>2024.0.0</spring-cloud.version>
        <spring-modulith.version>1.3.1</spring-modulith.version>
        <zipkin-reporter-brave.version>3.4.0</zipkin-reporter-brave.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework.modulith</groupId>
                <artifactId>spring-modulith-bom</artifactId>
                <version>${spring-modulith.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>software.amazon.awssdk</groupId>
                <artifactId>bom</artifactId>
                <version>${aws.java.sdk.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <dependencies>

        <!-- PACT -->
        <dependency>
            <groupId>au.com.dius.pact.consumer</groupId>
            <artifactId>junit5</artifactId>
            <version>4.6.16</version>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>xerces</groupId>
                    <artifactId>xercesImpl</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>au.com.dius.pact.provider</groupId>
            <artifactId>junit5</artifactId>
            <version>4.6.16</version>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>xerces</groupId>
                    <artifactId>xercesImpl</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- support for other new Java 8 datatypes outside of date/time: most notably Optional, OptionalLong, OptionalDouble -->
        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jdk8</artifactId>
        </dependency>
        <!-- Java 8 Date/time -->
        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jsr310</artifactId>
        </dependency>

        <!-- Jackson -->
        <!-- support for detecting constructor and factory method ("creator") parameters without having to use @JsonProperty annotation	-->
        <dependency>
            <groupId>com.fasterxml.jackson.module</groupId>
            <artifactId>jackson-module-parameter-names</artifactId>
        </dependency>
        <!-- Report logs to Loki -->
        <dependency>
            <groupId>com.github.loki4j</groupId>
            <artifactId>loki-logback-appender</artifactId>
            <version>${loki-logback-appender.version}</version>
        </dependency>
        <dependency>
            <!-- Otherwise we get compile warnings -->
            <groupId>com.github.spotbugs</groupId>
            <artifactId>spotbugs-annotations</artifactId>
            <version>4.8.6</version>
            <scope>compile</scope>
        </dependency>
        <!--        <dependency>-->
        <!--            &lt;!&ndash;-->
        <!--            Automatically starts up the local docker-compose file.-->
        <!--             &ndash;&gt;-->
        <!--            <groupId>org.springframework.boot</groupId>-->
        <!--            <artifactId>spring-boot-docker-compose</artifactId>-->
        <!--            <scope>runtime</scope>-->
        <!--            <optional>true</optional>-->
        <!--        </dependency>-->

        <dependency>
            <!-- Provides annotations such as @Var to tell error-prone something is non-constant -->
            <groupId>com.google.errorprone</groupId>
            <artifactId>error_prone_annotations</artifactId>
            <version>${error-prone-core.version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>de.rweisleder</groupId>
            <artifactId>archunit-spring</artifactId>
            <version>1.0.0</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>io.github.adr</groupId>
            <artifactId>e-adr</artifactId>
            <version>1.0.0</version>
        </dependency>

        <dependency>
            <!-- https://github.com/origin-energy/java-snapshot-testing -->
            <groupId>io.github.origin-energy</groupId>
            <artifactId>java-snapshot-testing-junit5</artifactId>
            <version>4.0.8</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <!-- https://github.com/origin-energy/java-snapshot-testing -->
            <groupId>io.github.origin-energy</groupId>
            <artifactId>java-snapshot-testing-plugin-jackson</artifactId>
            <version>4.0.8</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>io.hypersistence</groupId>
            <artifactId>hypersistence-utils-hibernate-63</artifactId>
            <version>${hypersistence-utils-hibernate-63.version}</version>
        </dependency>
        <!-- Test metrics and distributed tracing -->
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-observation-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-tracing-test</artifactId> <!-- For unit tests -->
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-tracing-integration-test</artifactId> <!-- For integration tests -->
            <scope>test</scope>
        </dependency>

        <!-- Metrics -->
        <!-- Without this dependency actuator does not provide a /actuator/prometheus endpoint. -->
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-registry-prometheus</artifactId>
        </dependency>
        <!-- To bridge the Micrometer Observation API to Brave -->
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-tracing-bridge-otel</artifactId>
        </dependency>
        <!-- Add testing libs https://docs.micrometer.io/tracing/reference/testing.html -->
        <!-- To report traces to Zipkin -->
        <dependency>
            <groupId>io.zipkin.reporter2</groupId>
            <artifactId>zipkin-reporter-brave</artifactId>
            <version>${zipkin-reporter-brave.version}</version>
        </dependency>

        <!-- Shed Lock -->
        <dependency>
            <groupId>net.javacrumbs.shedlock</groupId>
            <artifactId>shedlock-provider-jdbc</artifactId>
            <version>5.12.0</version>
        </dependency>
        <dependency>
            <groupId>net.javacrumbs.shedlock</groupId>
            <artifactId>shedlock-spring</artifactId>
            <version>5.12.0</version>
        </dependency>

        <dependency>
            <!--
            Used in Java unit tests to verify whether the contract for the equals and hashCode methods in a class is met.
            See for more: https://jqno.nl/equalsverifier/manual/
            -->
            <groupId>nl.jqno.equalsverifier</groupId>
            <artifactId>equalsverifier</artifactId>
            <version>3.16.1</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.httpcomponents.client5</groupId>
            <artifactId>httpclient5</artifactId>
        </dependency>

        <!-- DB schema migration -->
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-database-postgresql</artifactId>
        </dependency>

        <!--
        jMolecules: Annotations and interfaces to enrich codebase with tactical DDD and architecture concepts.
        Helps bridge the model-code and architecture-code gap.
        See for more: https://github.com/xmolecules/jmolecules
        -->
        <dependency>
            <groupId>org.jmolecules</groupId>
            <artifactId>jmolecules-ddd</artifactId>
            <version>${jmolecules.version}</version>
        </dependency>
        <dependency>
            <groupId>org.jmolecules</groupId>
            <artifactId>jmolecules-events</artifactId>
            <version>${jmolecules.version}</version>
        </dependency>
        <dependency>
            <groupId>org.jmolecules</groupId>
            <artifactId>jmolecules-onion-architecture</artifactId>
            <version>${jmolecules.version}</version>
        </dependency>

        <!--
        jMolecules Integrations:
        See for more: https://github.com/xmolecules/jmolecules-integrations
        -->
        <dependency>
            <groupId>org.jmolecules.integrations</groupId>
            <artifactId>jmolecules-apt</artifactId>
            <version>${jmolecules-integrations.version}</version>
        </dependency>
        <dependency>
            <groupId>org.jmolecules.integrations</groupId>
            <artifactId>jmolecules-ddd-integration</artifactId>
            <version>${jmolecules-integrations.version}</version>
        </dependency>
        <dependency>
            <groupId>org.jmolecules.integrations</groupId>
            <artifactId>jmolecules-jpa</artifactId>
            <version>${jmolecules-integrations.version}</version>
        </dependency>
        <dependency>
            <groupId>org.jmolecules.integrations</groupId>
            <artifactId>jmolecules-spring</artifactId>
            <version>${jmolecules-integrations.version}</version>
        </dependency>
        <dependency>
            <groupId>org.jmolecules.integrations</groupId>
            <artifactId>jmolecules-starter-test</artifactId>
            <version>${jmolecules-integrations.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>

        <dependency>
            <groupId>software.amazon.awssdk</groupId>
            <artifactId>s3</artifactId>
        </dependency>

        <!-- =============================================================================================================== -->
        <!-- ================================================= Dev Tools  ================================================== -->
        <!-- =============================================================================================================== -->
        <dependency>
            <!--
            Refreshes the Spring Context on compilation on running app server.
            Meaning, during development restarting the app is required fewer times.
             -->
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <!-- Required for Micrometer observability annotations -->
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>
        <!-- Spring Boot starters -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-hateoas</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-mail</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>

        <!-- =============================================================================================================== -->
        <!-- ============================================== Test Dependencies ============================================== -->
        <!-- =============================================================================================================== -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <!-- Exclude JUnit 4 -->
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-testcontainers</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>am.ik.spring</groupId>
            <artifactId>retryable-client-http-request-interceptor</artifactId>
            <version>0.7.0</version>
        </dependency>

        <!-- Spring Modulith starters -->
        <dependency>
            <groupId>org.springframework.modulith</groupId>
            <artifactId>spring-modulith-starter-core</artifactId>
        </dependency>
        <!-- Added to support transactional event publication inside modulith-->
        <dependency>
            <groupId>org.springframework.modulith</groupId>
            <artifactId>spring-modulith-starter-jpa</artifactId>
        </dependency>

        <!-- Architecture Tests -->
        <dependency>
            <groupId>org.springframework.modulith</groupId>
            <artifactId>spring-modulith-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.restdocs</groupId>
            <artifactId>spring-restdocs-mockmvc</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Test Container -->
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>postgresql</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Feature flags -->
        <dependency>
            <groupId>org.togglz</groupId>
            <artifactId>togglz-core</artifactId>
            <version>4.4.0</version>
        </dependency>

        <!-- Feature Flags -->
        <dependency>
            <groupId>org.togglz</groupId>
            <artifactId>togglz-testing</artifactId>
            <version>4.4.0</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <!--
                    - Code formatter verifying and applying the palantir-java-format.
                    - Runs as part of the verify phase.
                    - Apart from spotless:check, the plugin can also auto format the code using 'mvn spotless:apply'
                    - Install the IntelliJ plugin and configure your IntelliJ JRE Config
                    https://plugins.jetbrains.com/plugin/13180-palantir-java-format
                    - IJ > Settings > "palantir java format settings" > enable

                    See for more infos: https://github.com/palantir/palantir-java-format
                    -->
                    <groupId>com.diffplug.spotless</groupId>
                    <artifactId>spotless-maven-plugin</artifactId>
                    <version>2.43.0</version>
                    <configuration>
                        <!-- define a language-specific format -->
                        <java>
                            <palantirJavaFormat>
                                <style>PALANTIR</style>
                            </palantirJavaFormat>
                            <removeUnusedImports /> <!-- self-explanatory -->
                            <formatAnnotations />  <!-- fixes formatting of type annotations, see below -->
                        </java>
                        <pom>
                            <sortPom>
                                <!-- https://github.com/Ekryd/sortpom/wiki/Parameters -->
                                <nrOfIndentSpace>4</nrOfIndentSpace>
                                <encoding>${project.build.sourceEncoding}</encoding>
                                <predefinedSortOrder>recommended_2008_06</predefinedSortOrder>
                                <sortDependencies>scope,groupId,artifactId</sortDependencies>
                                <sortDependencyExclusions>groupId,artifactId</sortDependencyExclusions>
                                <sortModules>true</sortModules>
                                <sortPlugins>groupId,artifactId</sortPlugins>
                                <!-- Sorts Maven pom properties alphabetically.
                                Affects both project/properties and project/profiles/profile/properties. -->
                                <sortProperties>true</sortProperties>
                            </sortPom>
                        </pom>
                    </configuration>
                    <executions>
                        <execution>
                            <goals>
                                <goal>check</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>io.github.git-commit-id</groupId>
                    <artifactId>git-commit-id-maven-plugin</artifactId>
                    <version>9.0.1</version>
                    <configuration>
                        <injectAllReactorProjects>true</injectAllReactorProjects>
                        <runOnlyOnce>true</runOnlyOnce>
                        <skipPoms>false</skipPoms>
                        <dateFormat>yyyy-MM-dd'T'HH:mm:ssXXX</dateFormat>
                    </configuration>
                    <executions>
                        <execution>
                            <id>retrieve-git-info</id>
                            <goals>
                                <goal>revision</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-checkstyle-plugin</artifactId>
                    <version>3.6.0</version>
                    <configuration>
                        <checkstyleRules>
                            <!-- We only enable rules that are not enforced by
                            Error Prone or automatically corrected through
                            application of google-java-format (GJF). -->
                            <module name="Checker">
                                <module name="RegexpMultiline">
                                    <!-- GJF drops trailing horizontal
                                    whitespace and blank lines preceding a
                                    closing curly brace, but it does not remove
                                    a blank line following an opening curly
                                    brace. Here we disallow that specific case.
                                    (The regular expression assumes that the
                                    code has already been formatted using GJF.) -->
                                    <property name="fileExtensions" value="java"/>
                                    <property name="format" value="\{\r?\n\r?\n"/>
                                    <property name="message" value="Avoid blank lines at the start of a block."/>
                                </module>
                                <module name="SuppressWarningsFilter"/>
                                <module name="TreeWalker">
                                    <module name="AbbreviationAsWordInName"/>
                                    <module name="AnnotationUseStyle">
                                        <!-- XXX: Right now this check doesn't
                                        completely enforce the desired style.
                                        See https://github.com/checkstyle/checkstyle/issues/4972;
                                        we're looking for the proposed `compact
                                        = ALWAYS` and `singleArrayCurlies =
                                        NEVER` style. -->
                                    </module>
                                    <module name="AvoidEscapedUnicodeCharacters">
                                        <property name="allowEscapesForControlCharacters" value="true"/>
                                        <property name="allowIfAllCharactersEscaped" value="true"/>
                                        <property name="allowNonPrintableEscapes" value="true"/>
                                    </module>
                                    <module name="AvoidNoArgumentSuperConstructorCall"/>
                                    <module name="ConstructorsDeclarationGrouping"/>
                                    <module name="DeclarationOrder">
                                        <!-- We don't enforce sorting fields by
                                        their visibility modifier, for two
                                        reasons:
                                        - During (class) initialization
                                          declaration order matters. Though the
                                          plugin does not warn about fields
                                          with obvious dependencies, its
                                          dependency analysis is necessarily
                                          incomplete; NPEs may result if some
                                          of its advice is followed.
                                        - Sometimes a field is annotated
                                          `@VisibleForTesting`. It may then be
                                          preferable not to reorder. The plugin
                                          does not currently respect this
                                          annotation.
                                        Note that as-is this check also doesn't
                                        enforce that static fields are before
                                        instance fields. See
                                        https://github.com/checkstyle/checkstyle/issues/7043. -->
                                        <property name="ignoreModifiers" value="true"/>
                                    </module>
                                    <module name="DefaultComesLast"/>
                                    <module name="DesignForExtension"/>
                                    <module name="EmptyBlock">
                                        <property name="option" value="text"/>
                                    </module>
                                    <module name="EmptyCatchBlock">
                                        <property name="exceptionVariableName" value="ignored"/>
                                    </module>
                                    <module name="EmptyLineSeparator">
                                        <!-- XXX: Google Java Format doesn't
                                        enforce an empty line before method
                                        declarations with Javadoc. This rule
                                        flags those cases. For technical
                                        reasons this entails inspecting not
                                        just `METHOD_DEF` tokens. See
                                        https://github.com/google/google-java-format/issues/399. -->
                                        <property name="tokens"
                                                  value="CLASS_DEF, CTOR_DEF, ENUM_DEF, INSTANCE_INIT, INTERFACE_DEF, METHOD_DEF, STATIC_INIT"/>
                                    </module>
                                    <module name="EmptyStatement"/>
                                    <module name="FinalClass"/>
                                    <module name="HiddenField">
                                        <property name="ignoreConstructorParameter" value="true"/>
                                        <property name="ignoreSetter" value="true"/>
                                        <property name="setterCanReturnItsClass" value="true"/>
                                    </module>
                                    <module name="IllegalIdentifierName"/>
                                    <module name="IllegalImport">
                                        <property name="illegalClasses" value="com.google.auto.common.MoreStreams">
                                            <!-- Instead, please use Guava's
                                            `java.util.stream.Collector`s. -->
                                        </property>
                                        <property name="illegalClasses" value="com.mongodb.lang.Nullable">
                                            <!-- Instead, please use
                                            `org.jspecify.annotations.Nullable`. -->
                                        </property>
                                        <property name="illegalClasses" value="io.micrometer.core.lang.Nullable">
                                            <!-- Instead, please use
                                            `org.jspecify.annotations.Nullable`. -->
                                        </property>
                                        <property name="illegalClasses" value="javax.annotation.Nullable">
                                            <!-- Instead, please use
                                            `org.jspecify.annotations.Nullable`. -->
                                        </property>
                                        <property name="illegalClasses" value="javax.annotation.concurrent.Immutable">
                                            <!-- Instead, please use
                                            `com.google.errorprone.annotations.Immutable`. -->
                                        </property>
                                        <property name="illegalClasses"
                                                  value="org.jetbrains.annotations.CheckReturnValue">
                                            <!-- Instead, please use
                                            `com.google.errorprone.annotations.CheckReturnValue`. -->
                                        </property>
                                        <property name="illegalClasses"
                                                  value="org.jetbrains.annotations.VisibleForTesting">
                                            <!-- Instead, please use
                                            `com.google.common.annotations.VisibleForTesting`. -->
                                        </property>
                                        <property name="illegalClasses"
                                                  value="org.springframework.context.annotation.ComponentScan">
                                            <!-- Instead, please explicitly
                                            `@Import` the components. -->
                                        </property>
                                        <property name="illegalClasses" value="org.springframework.lang.Nullable">
                                            <!-- Instead, please use
                                            `org.jspecify.annotations.Nullable`. -->
                                        </property>
                                        <property name="illegalPkgs" value="autovalue.shaded"/>
                                        <property name="illegalPkgs" value="com.amazonaws.annotation"/>
                                        <property name="illegalPkgs" value="com.beust.jcommander.internal"/>
                                        <property name="illegalPkgs" value="com.google.api.client.repackaged"/>
                                        <property name="illegalPkgs" value="com.google.common.cache">
                                            <!-- Instead, please use Caffeine. -->
                                        </property>
                                        <property name="illegalPkgs" value="com.tngtech.archunit.thirdparty"/>
                                        <property name="illegalPkgs" value="jdk"/>
                                        <property name="illegalPkgs" value="jersey.repackaged"/>
                                        <property name="illegalPkgs" value="nl.jqno.equalsverifier.internal"/>
                                        <property name="illegalPkgs" value="org.apache.commons.lang3">
                                            <!-- Instead, please use Guava or a
                                            custom helper method. -->
                                        </property>
                                        <property name="illegalPkgs" value="org.immutables.value.internal"/>
                                        <property name="illegalPkgs" value="org.jongo.marshall.jackson.oid">
                                            <!-- Instead, please use Jackson's
                                            `@JsonProperty` annotation. -->
                                        </property>
                                        <property name="illegalPkgs" value="org.mutabilitydetector.internal"/>
                                        <property name="illegalPkgs" value="org.testcontainers.shaded"/>
                                        <property name="illegalPkgs" value="org.testng.internal"/>
                                    </module>
                                    <module name="IllegalImport">
                                        <!-- XXX: This config uses
                                        regexes to disallow static
                                        imports. Once `illegalClasses`
                                        disallows static imports by default,
                                        this config can be merged into the one
                                        above. See
                                        https://github.com/checkstyle/checkstyle/issues/4954. -->
                                        <property name="illegalClasses"
                                                  value="com\.google\.api\.client\.util\.Preconditions(\..*?)?">
                                            <!-- Instead, please use
                                            `com.google.common.base.Preconditions`. -->
                                        </property>
                                        <property name="illegalClasses"
                                                  value="com\.nimbusds\.jose\.util\.StandardCharset(\..*?)?">
                                            <!-- Instead, please use
                                            `java.nio.charset.StandardCharsets`. -->
                                        </property>
                                        <property name="illegalClasses"
                                                  value="javax\.xml\.bind\.DatatypeConverter(\..*?)?"/>
                                        <property name="illegalClasses"
                                                  value="org\.assertj\.core\.util\.Preconditions(\..*?)?">
                                            <!-- Instead, please use
                                            `com.google.common.base.Preconditions`. -->
                                        </property>
                                        <property name="illegalClasses"
                                                  value="org\.assertj\.core\.util\.Streams(\..*?)?">
                                            <!-- Instead, please use
                                            `com.google.common.collect.Streams`. -->
                                        </property>
                                        <property name="illegalClasses"
                                                  value="org\.springframework\.stereotype\.(Component|Controller|Service)">
                                            <!-- We don't use Spring's
                                            component scanning, so `@Component`
                                            and `@Service` have no effect.
                                            Instead of `@Controller` use
                                            `@RestController`. -->
                                        </property>
                                        <property name="illegalClasses"
                                                  value="org\.springframework\.util\.Assert(\..*?)?">
                                            <!-- Instead, please use
                                            `com.google.common.base.Preconditions`. -->
                                        </property>
                                        <property name="illegalClasses" value="org\.testng\.AssertJUnit(\..*?)?">
                                            <!-- Instead, please use
                                            `org.assertj.core.api.Assertions`. -->
                                        </property>
                                        <property name="regexp" value="true"/>
                                    </module>
                                    <module name="IllegalCatch"/>
                                    <module name="IllegalThrows"/>
                                    <module name="InnerAssignment"/>
                                    <module name="InvalidJavadocPosition"/>
                                    <module name="JavadocBlockTagLocation"/>
                                    <module name="JavadocStyle">
                                        <property name="checkEmptyJavadoc" value="true"/>
                                    </module>
                                    <module name="LocalVariableName"/>
                                    <module name="MatchXpath">
                                        <property name="query"
                                                  value="//BLOCK_COMMENT_BEGIN[./COMMENT_CONTENT[contains(@text, '@author')]]"/>
                                        <message key="matchxpath.match"
                                                 value="Avoid the `@author` Javadoc tag; Git history suffices."/>
                                    </module>
                                    <module name="MissingDeprecated"/>
                                    <module name="MutableException"/>
                                    <module name="NeedBraces"/>
                                    <module name="NoClone"/>
                                    <module name="NoCodeInFile"/>
                                    <module name="NoEnumTrailingComma"/>
                                    <module name="NoFinalizer"/>
                                    <module name="PackageDeclaration"/>
                                    <module name="PackageName">
                                        <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
                                    </module>
                                    <module name="ParameterAssignment"/>
                                    <module name="RedundantModifier"/>
                                    <module name="SimplifyBooleanExpression"/>
                                    <module name="SimplifyBooleanReturn"/>
                                    <module name="SummaryJavadoc"/>
                                    <module name="SuppressWarningsHolder">
                                        <property name="aliasList"
                                                  value="com.puppycrawl.tools.checkstyle.checks.coding.UnusedLocalVariableCheck=unused"/>
                                    </module>
                                    <module name="TrailingComment"/>
                                    <module name="UnnecessarySemicolonAfterTypeMemberDeclaration"/>
                                    <module name="UnnecessarySemicolonInEnumeration"/>
                                    <module name="UnnecessarySemicolonInTryWithResources"/>
                                    <module name="UnusedImports">
                                        <!-- Error-prone also detects these,
                                        but (currently) doesn't warn about
                                        JavaDoc-only imports. -->
                                    </module>
                                    <module name="VisibilityModifier"/>
                                </module>
                                <module name="UniqueProperties"/>
                                <module name="io.spring.nohttp.checkstyle.check.NoHttpCheck"/>
                            </module>
                        </checkstyleRules>
                        <excludeGeneratedSources>true</excludeGeneratedSources>
                        <failOnViolation>false</failOnViolation>
                        <includeTestSourceDirectory>true</includeTestSourceDirectory>
                        <resourceIncludes>**/*</resourceIncludes>
                        <!-- XXX: The generated
                        `target/generated-sources/license/THIRD-PARTY.txt`
                        files are not excluded by the `excludeGeneratedSources`
                        setting. Consider filing an issue for this. -->
                        <resourceExcludes>THIRD-PARTY.txt</resourceExcludes>
                    </configuration>
                    <dependencies>
                        <dependency>
                            <groupId>com.puppycrawl.tools</groupId>
                            <artifactId>checkstyle</artifactId>
                            <version>10.21.1</version>
                        </dependency>
                        <dependency>
                            <groupId>io.spring.nohttp</groupId>
                            <artifactId>nohttp-checkstyle</artifactId>
                            <version>0.0.11</version>
                        </dependency>
                    </dependencies>
                    <executions>
                        <execution>
                            <id>run-checkstyle</id>
                            <goals>
                                <goal>check</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.13.0</version>
                    <configuration>
                        <annotationProcessorPaths>
                            <!--
                            - Analyses AST to spot bugs: https://errorprone.info/bugpatterns
                                - Can be extended with custom or third-party bug patterns: https://error-prone.picnic.tech/
                            - Can automatically patch code not matching a patter
                                - Can be extended with custom or third-part patchers

                            - Install IJ plugin: https://plugins.jetbrains.com/plugin/7349-error-prone-compiler
                                - Configure Settings | Compiler | Java Compiler | Use compiler: Javac with error-prone
                                - make sure Settings | Compiler | Use external build is NOT selected.
                            -->
                            <path>
                                <groupId>com.google.errorprone</groupId>
                                <artifactId>error_prone_core</artifactId>
                                <version>${error-prone-core.version}</version>
                            </path>
                            <!--
                            - Helps eliminate NullPointerExceptions
                            - Requires error prone
                            See for more: https://github.com/uber/NullAway/wiki
                            -->
                            <path>
                                <groupId>com.uber.nullaway</groupId>
                                <artifactId>nullaway</artifactId>
                                <version>${nullaway.version}</version>
                            </path>
                        </annotationProcessorPaths>
                    </configuration>
                </plugin>
                <plugin>
                    <!--
                    maven-enforcer-plugin helps keep sanity in your pom.xml
                    -->
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-enforcer-plugin</artifactId>
                    <version>3.5.0</version>
                    <configuration>
                        <rules>
                            <banCircularDependencies/>
                            <banDependencyManagementScope/>
                            <banDuplicatePomDependencyVersions/>
                            <requireNoRepositories/>
<!--                            <requirePluginVersions/>-->
                            <requireUpperBoundDeps/>
                            <enforceBytecodeVersion>
                                <maxJdkVersion>${java.version}</maxJdkVersion>
                            </enforceBytecodeVersion>
                            <banDynamicVersions/>
                            <requireJavaVersion>
                                <version>${java.version}</version>
                            </requireJavaVersion>
                        </rules>
                        <fail>true</fail>
                    </configuration>
                    <dependencies>
                        <dependency>
                            <groupId>org.codehaus.mojo</groupId>
                            <artifactId>extra-enforcer-rules</artifactId>
                            <version>1.9.0</version>
                        </dependency>
                    </dependencies>
                    <executions>
                        <execution>
                            <id>apply-enforcement-rules</id>
                            <goals>
                                <goal>enforce</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>license-maven-plugin</artifactId>
                    <version>2.5.0</version>
                    <configuration>
                        <includedLicenses>
                            <!-- The SPDX IDs of licenses of third-party
                            software that may be bundled as part of
                            non-distributed (i.e. Picnic-internal) deployable
                            artifacts (i.e. web services). -->
                            <includedLicense>Apache-2.0</includedLicense>
                            <includedLicense>BSD-2-Clause</includedLicense>
                            <includedLicense>BSD-3-Clause</includedLicense>
                            <includedLicense>CC0-1.0</includedLicense>
                            <includedLicense>CDDL-1.1</includedLicense>
                            <includedLicense>EPL-1.0</includedLicense>
                            <includedLicense>EPL-2.0</includedLicense>
                            <includedLicense>GPL-2.0-with-classpath-exception</includedLicense>
                            <includedLicense>ICU</includedLicense>
                            <includedLicense>LGPL-2.1+</includedLicense>
                            <includedLicense>LGPL-3.0+</includedLicense>
                            <includedLicense>MIT</includedLicense>
                            <includedLicense>MIT-0</includedLicense>
                            <includedLicense>Public Domain</includedLicense>
                        </includedLicenses>
                        <licenseMerges>
                            <!-- License aliases. Each section corresponds to a
                            single license; where applicable the license's SPDX
                            ID is listed first; the aliases that follow are (or
                            were) declared by one or more third-party
                            dependencies. -->
                            <licenseMerge>
                                <!-- -->
                                Apache-2.0
                                | Apache 2
                                | Apache 2.0
                                | Apache License 2.0
                                | Apache License, Version 2.0
                                | The Apache License, Version 2.0
                                | The Apache Software License, Version 2.0
                            </licenseMerge>
                            <licenseMerge>
                                <!-- XXX: Get projects referencing just "BSD"
                                to explicitly state the clause count. -->
                                BSD-2-Clause
                                | The BSD License
                            </licenseMerge>
                            <licenseMerge>
                                <!-- XXX: Get projects referencing just "BSD"
                                to explicitly state the clause count. -->
                                BSD-3-Clause
                                | 3-Clause BSD License
                                | BSD 3-clause
                                | BSD 3-Clause "New" or "Revised" License (BSD-3-Clause)
                                <!-- XXX: Typo; file ticket. -->
                                | BSD licence
                                | BSD License 3
                                | Eclipse Distribution License (New BSD License)
                                | Eclipse Distribution License - v 1.0
                                | EDL 1.0
                                | New BSD License
                            </licenseMerge>
                            <licenseMerge>
                                <!-- -->
                                CC0-1.0
                                | CC0
                                | Public Domain, per Creative Commons CC0
                            </licenseMerge>
                            <licenseMerge>
                                <!-- -->
                                CDDL-1.1
                                | CDDL 1.1
                                | Dual license consisting of the CDDL v1.1 and GPL v2
                            </licenseMerge>
                            <licenseMerge>
                                <!-- -->
                                EPL-1.0
                                | Eclipse Public License 1.0
                                | Eclipse Public License - v 1.0
                            </licenseMerge>
                            <licenseMerge>
                                <!-- -->
                                EPL-2.0
                                | Eclipse Public License - v 2.0
                                | Eclipse Public License v2.0
                                | EPL 2.0
                            </licenseMerge>
                            <licenseMerge>
                                <!-- -->
                                ICU
                                | Unicode/ICU License
                            </licenseMerge>
                            <licenseMerge>
                                <!-- -->
                                GPL-2.0-with-classpath-exception
                                | CDDL/GPLv2+CE
                                | CDDL + GPLv2 with classpath exception
                                | GNU General Public License, version 2 (GPL2), with the classpath exception
                                | GNU General Public License, version 2, with the Classpath Exception
                                | GPL2 w/ CPE
                            </licenseMerge>
                            <licenseMerge>
                                <!-- -->
                                LGPL-2.1+
                                | LGPL-2.1-or-later
                            </licenseMerge>
                            <licenseMerge>
                                <!-- XXX: Get projects referencing just "LGPL"
                                to explicitly state the license version. -->
                                LGPL-3.0+
                                | GNU Lesser Public License
                            </licenseMerge>
                            <licenseMerge>
                                <!-- -->
                                MIT
                                | MIT license
                                | MIT License
                                | The MIT License
                                | The MIT License (MIT)
                            </licenseMerge>
                        </licenseMerges>
                        <!-- Nearly no projects ship a "missing third party
                        licenses" file. Since the operation of attempting to
                        retrieve these files is very slow, we have decided to
                        disable this functionality at this time. -->
                        <useRepositoryMissingFiles>false</useRepositoryMissingFiles>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>versions-maven-plugin</artifactId>
                    <version>2.18.0</version>
                    <configuration>
                        <updateBuildOutputTimestampPolicy>never</updateBuildOutputTimestampPolicy>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.jacoco</groupId>
                    <artifactId>jacoco-maven-plugin</artifactId>
                    <version>0.8.12</version>
                </plugin>

            </plugins>
        </pluginManagement>
        <plugins>
            <plugin>
                <groupId>io.github.git-commit-id</groupId>
                <artifactId>git-commit-id-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <configuration>
                    <outputDirectory>${project.build.directory}/javadoc</outputDirectory>
                </configuration>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>aggregate</goal>
                        </goals>
                        <phase>site</phase>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <!-- https://github.com/odrotbohm/spring-modulith-deep-dive/blob/681cbca11646c101383fd58a45cd47773a059875/pom.xml#L48 -->
                <groupId>org.asciidoctor</groupId>
                <artifactId>asciidoctor-maven-plugin</artifactId>
                <version>3.0.0</version>
                <configuration>
                    <!--
                    To skip processing the AsciiDoc files, run: mvn -DskipDocs
                    -->
                    <skip>${skipDocs}</skip>
                    <doctype>book</doctype>
                    <attributes>
                        <docinfo>shared</docinfo>
                        <icons>font</icons>
                        <sectids>false</sectids>
                        <imagesdir>images</imagesdir>
                        <spring-modulith-version>${spring-modulith.version}</spring-modulith-version>
                        <toclevels>3</toclevels>
                    </attributes>
                    <requires>
                        <require>asciidoctor-diagram</require>
                    </requires>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>org.asciidoctor</groupId>
                        <artifactId>asciidoctorj-diagram</artifactId>
                        <version>2.3.0</version>
                    </dependency>
                    <dependency>
                        <groupId>org.springframework.restdocs</groupId>
                        <artifactId>spring-restdocs-asciidoctor</artifactId>
                        <version>3.0.1</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <id>asciidoc-to-html</id>
                        <goals>
                            <goal>process-asciidoc</goal>
                        </goals>
                        <phase>package</phase>
                        <configuration>
                            <requires>
                                <require>asciidoctor-diagram</require>
                            </requires>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <!--
            Just to peek at what Oliver would generate for us.
            A plugin that automatically generates bytecode based on jMolecules annotations and
            the technologies used in the project.
            For example, if you have JPA in your classpath and your aggregate class implements jMolecules' AggregateRoot
            interface, then jmolecules-bytebuddy automatically enriches your class with the necessary JPA annotations.
            This greatly reduced clutter in your domain classes and "non-default" values become more evident, e.g.
            you explicitly want to use a different table name for the annotation, which visually drowns in the regular JPA code.
            -->
            <id>jmolecules-bytebuddy</id>
            <dependencies>
                <dependency>
                    <groupId>org.jmolecules.integrations</groupId>
                    <artifactId>jmolecules-bytebuddy-nodep</artifactId>
                    <version>${jmolecules-integrations.version}</version>
                    <scope>provided</scope>
                </dependency>
            </dependencies>
            <build>
                <plugins>
                    <plugin>
                        <groupId>net.bytebuddy</groupId>
                        <artifactId>byte-buddy-maven-plugin</artifactId>
                        <version>${bytebuddy.version}</version>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>transform</goal>
                                    <!-- Enable the source code transformation -->
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <!--
            If combined with the `error-prone` profile above, this profile configures Error Prone to try and
            automatically fix (rather than merely flag) bug pattern violations in the source code.
            -->
            <id>patch</id>
            <activation>
                <property>
                    <name>error-prone.patch-checks</name>
                </property>
            </activation>
            <properties>
                <error-prone.patch-args>-XepPatchChecks:${error-prone.patch-checks} -XepPatchLocation:IN_PLACE
                </error-prone.patch-args>
            </properties>
        </profile>
        <profile>
            <!-- By default, we verify various aspects of a module and the
            artifact(s) it produces. We define these checks in a profile so
            that they can be disabled during development. See also the
            `error-prone` profile defined below. -->
            <id>build-checks</id>
            <activation>
                <property>
                    <name>!verification.skip</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.github.ekryd.sortpom</groupId>
                        <artifactId>sortpom-maven-plugin</artifactId>
                    </plugin>
                    <plugin>
                        <groupId>com.diffplug.spotless</groupId>
                        <artifactId>spotless-maven-plugin</artifactId>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-checkstyle-plugin</artifactId>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <configuration>
                            <compilerArgs combine.children="append">
                                <!-- We first enable all doclint checks and
                                then selectively disable a subset below. -->
                                <arg>-Xdoclint:all</arg>
                                <!-- We don't care about missing Javadoc
                                on non-public classes and members. -->
                                <arg>-Xdoclint:-missing/package</arg>
                                <!-- We first enable all lint checks and then
                                selectively disable a subset below. -->
                                <arg>-Xlint:all</arg>
                                <!-- The annotation processors do not handle
                                all annotations present on the classpath, and
                                javac complains about this. See
                                https://bugs.openjdk.java.net/browse/JDK-6999068. -->
                                <arg>-Xlint:-processing</arg>
                            </compilerArgs>
                            <showWarnings>true</showWarnings>
                        </configuration>
                        <executions>
                            <execution>
                                <id>default-testCompile</id>
                                <goals>
                                    <goal>testCompile</goal>
                                </goals>
                                <phase>test-compile</phase>
                                <configuration>
                                    <compilerArgs combine.children="append">
                                        <!-- Test code doesn't require Javadoc. -->
                                        <arg>-Xdoclint:-missing</arg>
                                    </compilerArgs>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-enforcer-plugin</artifactId>
                    </plugin>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>license-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>check-third-party-licenses</id>
                                <goals>
                                    <goal>add-third-party</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <!--
            An extension of the `build-checks` profile that configures
            Error Prone. This configuration is defined in a separate profile so
            that it can be combined with the `patch` profile below, without
            introducing the overhead of other build checks.
            -->
            <id>error-prone</id>
            <activation>
                <property>
                    <name>!verification.skip</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <configuration>
                            <encoding>UTF-8</encoding>
                            <compilerArgs combine.children="append">
                                <!-- https://docs.oracle.com/en/java/javase/21/docs/specs/man/javac.html -->
                                <!--
                                Enable all warnings
                                We turn off:
                                - 'serial' because we don't use Java serialization (and all it does is complain about the serialVersionUID)
                                - 'processing' because it complains about every annotation
                                -->
                                <arg>-Xlint:all,-serial,-processing,-varargs</arg>
                                <!-- Terminate compilation when *warnings* occur -->
                                <arg>-Werror</arg>

                                <!--
                                Error Prone Config: https://errorprone.info/docs/flags
                                Mainly based on: https://github.com/PicnicSupermarket/error-prone-support/blob/master/pom.xml
                                -->
                                <arg>
                                    -Xplugin:ErrorProne -Xep:Var:ERROR -Xep:StringSplitter:OFF
                                    <!--
                                    NullAway Configs
                                    https://github.com/uber/NullAway/wiki/Configuration
                                    -->
                                    -XepOpt:NullAway:AnnotatedPackages=li.selman.ddd
                                    <!--
                                    Calling .get() on an Optional value that hasn't been previously tested with Optional.isPresent(...)
                                    will result in an error.
                                    https://github.com/uber/NullAway/wiki/Configuration#optional-emptiness-check
                                    -->
                                    -XepOpt:NullAway:CheckOptionalEmptiness=true

                                    -XepOpt:IdentifierName:AllowInitialismsInTypeName=true
                                    -XepOpt:InlineMe:SkipInliningsWithComments=false
                                    <!-- https://github.com/google/error-prone/issues/2910 -->
                                    -XepOpt:Nullness:Conservative=false
                                    <!-- We don't target Android. -->
                                    -Xep:AndroidJdkLibsChecker:OFF
                                    <!-- We don't target JDK 7. -->
                                    -Xep:Java7ApiChecker:OFF
                                    <!-- We don't target JDK 8. -->
                                    -Xep:Java8ApiChecker:OFF
                                    <!-- We don't target Android. -->
                                    -Xep:StaticOrDefaultInterfaceMethod:OFF
                                    <!-- We generally discourage `var` use. -->
                                    -Xep:Varifier:OFF
                                    <!-- Yoda conditions are not always more readable than the alternative. -->
                                    -Xep:YodaCondition:OFF
                                    -XepOpt:CheckReturnValue:CheckAllConstructors=true
                                    <!-- Append additional custom arguments. -->
                                    ${error-prone.patch-args}
                                    ${error-prone.self-check-args}
                                </arg>
                                <!--
                                The Error Prone plugin makes certain
                                assumptions about the state of the AST at the
                                moment it is invoked. Those assumptions require
                                the `simple` compile policy. This flag may be
                                dropped after resolution of
                                https://bugs.openjdk.java.net/browse/JDK-8155674.
                                 -->
                                <arg>-XDcompilePolicy=simple</arg>
                                <!--
                                Similarly, Error Prone requires that flow
                                analysis has been performed, e.g. to determine
                                whether variables are effectively final. This
                                flag may be dropped if it ever becomes the
                                default. See
                                https://bugs.openjdk.org/browse/JDK-8134117.
                                -->
                                <arg>--should-stop=ifError=FLOW</arg>
                            </compilerArgs>
                            <annotationProcessorPaths>
                                <!--
                                - Analyses AST to spot bugs: https://errorprone.info/bugpatterns
                                    - Can be extended with custom or third-party bug patterns: https://error-prone.picnic.tech/
                                - Can automatically patch code not matching a patter
                                    - Can be extended with custom or third-part patchers

                                - Install IJ plugin: https://plugins.jetbrains.com/plugin/7349-error-prone-compiler
                                    - Configure Settings | Compiler | Java Compiler | Use compiler: Javac with error-prone
                                    - make sure Settings | Compiler | Use external build is NOT selected.
                                -->
                                <path>
                                    <groupId>com.google.errorprone</groupId>
                                    <artifactId>error_prone_core</artifactId>
                                </path>
                                <!--
                                - Helps eliminate NullPointerExceptions
                                - Requires error prone
                                See for more: https://github.com/uber/NullAway/wiki
                                -->
                                <path>
                                    <groupId>com.uber.nullaway</groupId>
                                    <artifactId>nullaway</artifactId>
                                </path>
                            </annotationProcessorPaths>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <!-- The `build-checks` and `error-prone` profiles enable numerous
            additional validations. By default, any violations break the build.
            This profile allows one to collect all violations without failing
            the build. -->
            <id>disallow-warnings</id>
            <activation>
                <property>
                    <name>!verification.warn</name>
                </property>
            </activation>
            <build>
                <pluginManagement>
                    <plugins>
                        <plugin>
                            <groupId>org.apache.maven.plugins</groupId>
                            <artifactId>maven-checkstyle-plugin</artifactId>
                            <configuration>
                                <failOnViolation>true</failOnViolation>
                            </configuration>
                        </plugin>
                        <plugin>
                            <groupId>org.apache.maven.plugins</groupId>
                            <artifactId>maven-compiler-plugin</artifactId>
                            <configuration>
                                <compilerArgs combine.children="append">
                                    <!-- When using a JDK other than the one
                                    specified using `-source`, `javac` warns
                                    that the bootstrap classpath will not be
                                    set. We don't want to fail on that warning. -->
                                    <arg>-Xlint:-options</arg>
                                </compilerArgs>
                                <failOnWarning>true</failOnWarning>
                            </configuration>
                        </plugin>
                        <plugin>
                            <groupId>org.apache.maven.plugins</groupId>
                            <artifactId>maven-dependency-plugin</artifactId>
                            <configuration>
                                <failBuild>true</failBuild>
                                <failOnWarning>true</failOnWarning>
                            </configuration>
                        </plugin>
                        <plugin>
                            <groupId>org.apache.maven.plugins</groupId>
                            <artifactId>maven-enforcer-plugin</artifactId>
                            <configuration>
                                <fail>true</fail>
                            </configuration>
                        </plugin>
                        <plugin>
                            <groupId>org.codehaus.mojo</groupId>
                            <artifactId>license-maven-plugin</artifactId>
                            <configuration>
                                <failOnBlacklist>true</failOnBlacklist>
                                <failOnMissing>true</failOnMissing>
                            </configuration>
                        </plugin>
                        <plugin>
                            <groupId>org.gaul</groupId>
                            <artifactId>modernizer-maven-plugin</artifactId>
                            <configuration>
                                <failOnViolations>true</failOnViolations>
                            </configuration>
                        </plugin>
                        <plugin>
                            <groupId>org.kordamp.maven</groupId>
                            <artifactId>pomchecker-maven-plugin</artifactId>
                            <configuration>
                                <failOnError>true</failOnError>
                                <failOnWarning>true</failOnWarning>
                            </configuration>
                        </plugin>
                    </plugins>
                </pluginManagement>
            </build>
        </profile>
        <profile>
            <id>skip-verification</id>
            <activation>
                <property>
                    <name>verification.skip</name>
                    <!-- Activated when 'disable-others' is set -->
                </property>
            </activation>
            <properties>
                <message>Other profiles are disabled</message>
            </properties>
        </profile>
        <profile>
            <id>warn-verification</id>
            <activation>
                <property>
                    <name>verification.warn</name>
                    <!-- Activated when 'disable-others' is set -->
                </property>
            </activation>
            <properties>
                <message>Other profiles are disabled</message>
            </properties>
        </profile>

    </profiles>
</project>
